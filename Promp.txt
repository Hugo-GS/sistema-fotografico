Yo estoy manejando de la siguiente forma te dare el ejemplo de un archivo por cada capa:
- En capa de datos
  - Persona.ts:
    ```
import { configuracion } from "./configuracion_global";
import * as mysql from "mysql2/promise";

export class Persona {
  id: number;
  nombre: string;
  apellidoPaterno: string;
  apellidoMaterno: string;
  constructor(
    id: number,
    nombre: string,
    apellidoPaterno: string,
    apellidoMaterno: string
  ) {
    this.id = id;
    this.nombre = nombre;
    this.apellidoPaterno = apellidoPaterno;
    this.apellidoMaterno = apellidoMaterno;
  }
}

export class PersonaDBContext {
  private config: typeof configuracion;
  
  constructor() {
    this.config = configuracion;
  }

  async crearPersona(persona: Persona): Promise<void> {
    try {
      const connection: mysql.Connection = await mysql.createConnection(
        this.config
      );
      const querySql: string = `
      INSERT INTO persona 
      (nombre, apellido_paterno, apellido_materno)
      VALUES (?, ?, ?)`;
      await connection.execute(querySql, [
        persona.nombre,
        persona.apellidoPaterno,
        persona.apellidoMaterno,
      ]);
      await connection.end();
    } catch (error) {
      console.error("Error al crear persona: ", error);
    }
  }

  async seleccionarPersonaPorId(idPersona: number): Promise<Persona | null> {
    try {
      const connection: mysql.Connection = await mysql.createConnection(this.config);
      const querySql: string = `
      SELECT id_persona, nombre, apellido_paterno, apellido_materno 
      FROM persona WHERE id_persona = ?`;
      const [filas]: any[] = await connection.execute(querySql, [idPersona]);
      
      await connection.end();

      if (filas.length > 0) {
        const [fila] = filas;
        return new Persona(
          fila.id_persona,
          fila.nombre,
          fila.apellido_paterno,
          fila.apellido_materno
        );
      } else {
        return null;
      }
    } catch (error) {
      console.error("Error al seleccionar persona:", error);
      return null;
    }
  }

}

    ```
- capa logica
  -  GestorPersona.ts:
    ```
import { PersonaDBContext, Persona } from "../capa_acceso_datos/Persona"; 

export class GestorPersona {
  private PersonaDBContext: PersonaDBContext;
  constructor() {
    this.PersonaDBContext = new PersonaDBContext();
  }
  
  async obtenerPersonaPorId(id: number): Promise<Persona | null> {
    const persona = await this.PersonaDBContext.seleccionarPersonaPorId(id);
    return persona;
  }
  
}
    ```
- capa presentacion
  - rutas
    -rutasAdministrador.ts:
    ```
import * as express from "express"
import { GestorPersona } from "../../capa_logica_negocio/GestorPersona";

const router = express.Router();
const gestorPersona = new GestorPersona();

router.get('/personas/:id', async (req, res) => {
  try {
    const personaId = parseInt(req.params.id);
    const persona = await gestorPersona.obtenerPersonaPorId(personaId);

    if (persona) {
      res.json(persona);
    } else {
      res.status(404).json({ message: 'Persona no encontrada' });
    }
  } catch (error) {
    console.error('Error al obtener la persona:', error);
    res.status(500).json({ message: 'Error al obtener la persona' });
  }
});

export default router;
    ```
  - views
    index.ejs


-----------------------------


Hola tengo un proyecto realizado en expressjs con typescript y EJS, este proyecto lo estoy usando con arquitectura 3 capas la cual tiene la siguiente estructura de carpetas y archivos:
- capa_acceso_datos
    - configuracion_global.ts
    - Persona.ts
- capa_logica_negocio
    - GestorPersona.ts
- capa_presentacion
    - public
        - scripts
            - manejadorRutas.ts
        - css
    - rutasAPI
        - rutasApiAdministrador.ts
        - rutasApiEncargado.ts
    - rutasWeb
        - rutasWebAdministrador.ts
    - views
        - index.ejs
- index.ts
- tsconfig.json
- package.json

  